/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type DeployerDiscoverableMetaV1ConstructionConfigStruct = {
  deployer: PromiseOrValue<string>;
  meta: PromiseOrValue<BytesLike>;
};

export type DeployerDiscoverableMetaV1ConstructionConfigStructOutput = [
  string,
  string
] & { deployer: string; meta: string };

export type EvaluableStruct = {
  interpreter: PromiseOrValue<string>;
  store: PromiseOrValue<string>;
  expression: PromiseOrValue<string>;
};

export type EvaluableStructOutput = [string, string, string] & {
  interpreter: string;
  store: string;
  expression: string;
};

export type IOStruct = {
  token: PromiseOrValue<string>;
  decimals: PromiseOrValue<BigNumberish>;
  vaultId: PromiseOrValue<BigNumberish>;
};

export type IOStructOutput = [string, number, BigNumber] & {
  token: string;
  decimals: number;
  vaultId: BigNumber;
};

export type OrderStruct = {
  owner: PromiseOrValue<string>;
  handleIO: PromiseOrValue<boolean>;
  evaluable: EvaluableStruct;
  validInputs: IOStruct[];
  validOutputs: IOStruct[];
};

export type OrderStructOutput = [
  string,
  boolean,
  EvaluableStructOutput,
  IOStructOutput[],
  IOStructOutput[]
] & {
  owner: string;
  handleIO: boolean;
  evaluable: EvaluableStructOutput;
  validInputs: IOStructOutput[];
  validOutputs: IOStructOutput[];
};

export type ClearStateChangeStruct = {
  aliceOutput: PromiseOrValue<BigNumberish>;
  bobOutput: PromiseOrValue<BigNumberish>;
  aliceInput: PromiseOrValue<BigNumberish>;
  bobInput: PromiseOrValue<BigNumberish>;
};

export type ClearStateChangeStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  aliceOutput: BigNumber;
  bobOutput: BigNumber;
  aliceInput: BigNumber;
  bobInput: BigNumber;
};

export type ClearConfigStruct = {
  aliceInputIOIndex: PromiseOrValue<BigNumberish>;
  aliceOutputIOIndex: PromiseOrValue<BigNumberish>;
  bobInputIOIndex: PromiseOrValue<BigNumberish>;
  bobOutputIOIndex: PromiseOrValue<BigNumberish>;
  aliceBountyVaultId: PromiseOrValue<BigNumberish>;
  bobBountyVaultId: PromiseOrValue<BigNumberish>;
};

export type ClearConfigStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  aliceInputIOIndex: BigNumber;
  aliceOutputIOIndex: BigNumber;
  bobInputIOIndex: BigNumber;
  bobOutputIOIndex: BigNumber;
  aliceBountyVaultId: BigNumber;
  bobBountyVaultId: BigNumber;
};

export type DepositConfigStruct = {
  token: PromiseOrValue<string>;
  vaultId: PromiseOrValue<BigNumberish>;
  amount: PromiseOrValue<BigNumberish>;
};

export type DepositConfigStructOutput = [string, BigNumber, BigNumber] & {
  token: string;
  vaultId: BigNumber;
  amount: BigNumber;
};

export type SignedContextV1Struct = {
  signer: PromiseOrValue<string>;
  context: PromiseOrValue<BigNumberish>[];
  signature: PromiseOrValue<BytesLike>;
};

export type SignedContextV1StructOutput = [string, BigNumber[], string] & {
  signer: string;
  context: BigNumber[];
  signature: string;
};

export type TakeOrderConfigStruct = {
  order: OrderStruct;
  inputIOIndex: PromiseOrValue<BigNumberish>;
  outputIOIndex: PromiseOrValue<BigNumberish>;
  signedContext: SignedContextV1Struct[];
};

export type TakeOrderConfigStructOutput = [
  OrderStructOutput,
  BigNumber,
  BigNumber,
  SignedContextV1StructOutput[]
] & {
  order: OrderStructOutput;
  inputIOIndex: BigNumber;
  outputIOIndex: BigNumber;
  signedContext: SignedContextV1StructOutput[];
};

export type WithdrawConfigStruct = {
  token: PromiseOrValue<string>;
  vaultId: PromiseOrValue<BigNumberish>;
  amount: PromiseOrValue<BigNumberish>;
};

export type WithdrawConfigStructOutput = [string, BigNumber, BigNumber] & {
  token: string;
  vaultId: BigNumber;
  amount: BigNumber;
};

export type EvaluableConfigStruct = {
  deployer: PromiseOrValue<string>;
  sources: PromiseOrValue<BytesLike>[];
  constants: PromiseOrValue<BigNumberish>[];
};

export type EvaluableConfigStructOutput = [string, string[], BigNumber[]] & {
  deployer: string;
  sources: string[];
  constants: BigNumber[];
};

export type OrderConfigStruct = {
  validInputs: IOStruct[];
  validOutputs: IOStruct[];
  evaluableConfig: EvaluableConfigStruct;
  meta: PromiseOrValue<BytesLike>;
};

export type OrderConfigStructOutput = [
  IOStructOutput[],
  IOStructOutput[],
  EvaluableConfigStructOutput,
  string
] & {
  validInputs: IOStructOutput[];
  validOutputs: IOStructOutput[];
  evaluableConfig: EvaluableConfigStructOutput;
  meta: string;
};

export type TakeOrdersConfigStruct = {
  output: PromiseOrValue<string>;
  input: PromiseOrValue<string>;
  minimumInput: PromiseOrValue<BigNumberish>;
  maximumInput: PromiseOrValue<BigNumberish>;
  maximumIORatio: PromiseOrValue<BigNumberish>;
  orders: TakeOrderConfigStruct[];
};

export type TakeOrdersConfigStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  TakeOrderConfigStructOutput[]
] & {
  output: string;
  input: string;
  minimumInput: BigNumber;
  maximumInput: BigNumber;
  maximumIORatio: BigNumber;
  orders: TakeOrderConfigStructOutput[];
};

export interface OrderBookInterface extends utils.Interface {
  functions: {
    "addOrder(((address,uint8,uint256)[],(address,uint8,uint256)[],(address,bytes[],uint256[]),bytes))": FunctionFragment;
    "clear((address,bool,(address,address,address),(address,uint8,uint256)[],(address,uint8,uint256)[]),(address,bool,(address,address,address),(address,uint8,uint256)[],(address,uint8,uint256)[]),(uint256,uint256,uint256,uint256,uint256,uint256),(address,uint256[],bytes)[],(address,uint256[],bytes)[])": FunctionFragment;
    "deposit((address,uint256,uint256))": FunctionFragment;
    "flashFee(address,uint256)": FunctionFragment;
    "flashLoan(address,address,uint256,bytes)": FunctionFragment;
    "maxFlashLoan(address)": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "removeOrder((address,bool,(address,address,address),(address,uint8,uint256)[],(address,uint8,uint256)[]))": FunctionFragment;
    "takeOrders((address,address,uint256,uint256,uint256,((address,bool,(address,address,address),(address,uint8,uint256)[],(address,uint8,uint256)[]),uint256,uint256,(address,uint256[],bytes)[])[]))": FunctionFragment;
    "vaultBalance(address,address,uint256)": FunctionFragment;
    "withdraw((address,uint256,uint256))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addOrder"
      | "clear"
      | "deposit"
      | "flashFee"
      | "flashLoan"
      | "maxFlashLoan"
      | "multicall"
      | "removeOrder"
      | "takeOrders"
      | "vaultBalance"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addOrder",
    values: [OrderConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "clear",
    values: [
      OrderStruct,
      OrderStruct,
      ClearConfigStruct,
      SignedContextV1Struct[],
      SignedContextV1Struct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [DepositConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "flashFee",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "flashLoan",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "maxFlashLoan",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOrder",
    values: [OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "takeOrders",
    values: [TakeOrdersConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultBalance",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [WithdrawConfigStruct]
  ): string;

  decodeFunctionResult(functionFragment: "addOrder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "clear", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flashFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flashLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxFlashLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "takeOrders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vaultBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AddOrder(address,address,tuple,uint256)": EventFragment;
    "AfterClear(address,tuple)": EventFragment;
    "Clear(address,tuple,tuple,tuple)": EventFragment;
    "Context(address,uint256[][])": EventFragment;
    "Deposit(address,tuple)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "MetaV1(address,uint256,bytes)": EventFragment;
    "OrderExceedsMaxRatio(address,address,uint256)": EventFragment;
    "OrderNotFound(address,address,uint256)": EventFragment;
    "OrderZeroAmount(address,address,uint256)": EventFragment;
    "RemoveOrder(address,tuple,uint256)": EventFragment;
    "TakeOrder(address,tuple,uint256,uint256)": EventFragment;
    "Withdraw(address,tuple,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AfterClear"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Clear"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Context"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetaV1"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderExceedsMaxRatio"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderNotFound"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderZeroAmount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TakeOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface AddOrderEventObject {
  sender: string;
  expressionDeployer: string;
  order: OrderStructOutput;
  orderHash: BigNumber;
}
export type AddOrderEvent = TypedEvent<
  [string, string, OrderStructOutput, BigNumber],
  AddOrderEventObject
>;

export type AddOrderEventFilter = TypedEventFilter<AddOrderEvent>;

export interface AfterClearEventObject {
  sender: string;
  clearStateChange: ClearStateChangeStructOutput;
}
export type AfterClearEvent = TypedEvent<
  [string, ClearStateChangeStructOutput],
  AfterClearEventObject
>;

export type AfterClearEventFilter = TypedEventFilter<AfterClearEvent>;

export interface ClearEventObject {
  sender: string;
  alice: OrderStructOutput;
  bob: OrderStructOutput;
  clearConfig: ClearConfigStructOutput;
}
export type ClearEvent = TypedEvent<
  [string, OrderStructOutput, OrderStructOutput, ClearConfigStructOutput],
  ClearEventObject
>;

export type ClearEventFilter = TypedEventFilter<ClearEvent>;

export interface ContextEventObject {
  sender: string;
  context: BigNumber[][];
}
export type ContextEvent = TypedEvent<
  [string, BigNumber[][]],
  ContextEventObject
>;

export type ContextEventFilter = TypedEventFilter<ContextEvent>;

export interface DepositEventObject {
  sender: string;
  config: DepositConfigStructOutput;
}
export type DepositEvent = TypedEvent<
  [string, DepositConfigStructOutput],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MetaV1EventObject {
  sender: string;
  subject: BigNumber;
  meta: string;
}
export type MetaV1Event = TypedEvent<
  [string, BigNumber, string],
  MetaV1EventObject
>;

export type MetaV1EventFilter = TypedEventFilter<MetaV1Event>;

export interface OrderExceedsMaxRatioEventObject {
  sender: string;
  owner: string;
  orderHash: BigNumber;
}
export type OrderExceedsMaxRatioEvent = TypedEvent<
  [string, string, BigNumber],
  OrderExceedsMaxRatioEventObject
>;

export type OrderExceedsMaxRatioEventFilter =
  TypedEventFilter<OrderExceedsMaxRatioEvent>;

export interface OrderNotFoundEventObject {
  sender: string;
  owner: string;
  orderHash: BigNumber;
}
export type OrderNotFoundEvent = TypedEvent<
  [string, string, BigNumber],
  OrderNotFoundEventObject
>;

export type OrderNotFoundEventFilter = TypedEventFilter<OrderNotFoundEvent>;

export interface OrderZeroAmountEventObject {
  sender: string;
  owner: string;
  orderHash: BigNumber;
}
export type OrderZeroAmountEvent = TypedEvent<
  [string, string, BigNumber],
  OrderZeroAmountEventObject
>;

export type OrderZeroAmountEventFilter = TypedEventFilter<OrderZeroAmountEvent>;

export interface RemoveOrderEventObject {
  sender: string;
  order: OrderStructOutput;
  orderHash: BigNumber;
}
export type RemoveOrderEvent = TypedEvent<
  [string, OrderStructOutput, BigNumber],
  RemoveOrderEventObject
>;

export type RemoveOrderEventFilter = TypedEventFilter<RemoveOrderEvent>;

export interface TakeOrderEventObject {
  sender: string;
  config: TakeOrderConfigStructOutput;
  input: BigNumber;
  output: BigNumber;
}
export type TakeOrderEvent = TypedEvent<
  [string, TakeOrderConfigStructOutput, BigNumber, BigNumber],
  TakeOrderEventObject
>;

export type TakeOrderEventFilter = TypedEventFilter<TakeOrderEvent>;

export interface WithdrawEventObject {
  sender: string;
  config: WithdrawConfigStructOutput;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, WithdrawConfigStructOutput, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface OrderBook extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OrderBookInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addOrder(
      config_: OrderConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    clear(
      alice_: OrderStruct,
      bob_: OrderStruct,
      clearConfig_: ClearConfigStruct,
      aliceSignedContext_: SignedContextV1Struct[],
      bobSignedContext_: SignedContextV1Struct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposit(
      config_: DepositConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    flashFee(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    flashLoan(
      receiver_: PromiseOrValue<string>,
      token_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    maxFlashLoan(
      token_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeOrder(
      order_: OrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    takeOrders(
      takeOrders_: TakeOrdersConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vaultBalance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdraw(
      config_: WithdrawConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addOrder(
    config_: OrderConfigStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  clear(
    alice_: OrderStruct,
    bob_: OrderStruct,
    clearConfig_: ClearConfigStruct,
    aliceSignedContext_: SignedContextV1Struct[],
    bobSignedContext_: SignedContextV1Struct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposit(
    config_: DepositConfigStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  flashFee(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  flashLoan(
    receiver_: PromiseOrValue<string>,
    token_: PromiseOrValue<string>,
    amount_: PromiseOrValue<BigNumberish>,
    data_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  maxFlashLoan(
    token_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  multicall(
    data: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeOrder(
    order_: OrderStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  takeOrders(
    takeOrders_: TakeOrdersConfigStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vaultBalance(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdraw(
    config_: WithdrawConfigStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addOrder(
      config_: OrderConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    clear(
      alice_: OrderStruct,
      bob_: OrderStruct,
      clearConfig_: ClearConfigStruct,
      aliceSignedContext_: SignedContextV1Struct[],
      bobSignedContext_: SignedContextV1Struct[],
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      config_: DepositConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    flashFee(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    flashLoan(
      receiver_: PromiseOrValue<string>,
      token_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    maxFlashLoan(
      token_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    removeOrder(order_: OrderStruct, overrides?: CallOverrides): Promise<void>;

    takeOrders(
      takeOrders_: TakeOrdersConfigStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        totalInput_: BigNumber;
        totalOutput_: BigNumber;
      }
    >;

    vaultBalance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      config_: WithdrawConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddOrder(address,address,tuple,uint256)"(
      sender?: null,
      expressionDeployer?: null,
      order?: null,
      orderHash?: null
    ): AddOrderEventFilter;
    AddOrder(
      sender?: null,
      expressionDeployer?: null,
      order?: null,
      orderHash?: null
    ): AddOrderEventFilter;

    "AfterClear(address,tuple)"(
      sender?: null,
      clearStateChange?: null
    ): AfterClearEventFilter;
    AfterClear(sender?: null, clearStateChange?: null): AfterClearEventFilter;

    "Clear(address,tuple,tuple,tuple)"(
      sender?: null,
      alice?: null,
      bob?: null,
      clearConfig?: null
    ): ClearEventFilter;
    Clear(
      sender?: null,
      alice?: null,
      bob?: null,
      clearConfig?: null
    ): ClearEventFilter;

    "Context(address,uint256[][])"(
      sender?: null,
      context?: null
    ): ContextEventFilter;
    Context(sender?: null, context?: null): ContextEventFilter;

    "Deposit(address,tuple)"(sender?: null, config?: null): DepositEventFilter;
    Deposit(sender?: null, config?: null): DepositEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "MetaV1(address,uint256,bytes)"(
      sender?: null,
      subject?: null,
      meta?: null
    ): MetaV1EventFilter;
    MetaV1(sender?: null, subject?: null, meta?: null): MetaV1EventFilter;

    "OrderExceedsMaxRatio(address,address,uint256)"(
      sender?: null,
      owner?: null,
      orderHash?: null
    ): OrderExceedsMaxRatioEventFilter;
    OrderExceedsMaxRatio(
      sender?: null,
      owner?: null,
      orderHash?: null
    ): OrderExceedsMaxRatioEventFilter;

    "OrderNotFound(address,address,uint256)"(
      sender?: null,
      owner?: null,
      orderHash?: null
    ): OrderNotFoundEventFilter;
    OrderNotFound(
      sender?: null,
      owner?: null,
      orderHash?: null
    ): OrderNotFoundEventFilter;

    "OrderZeroAmount(address,address,uint256)"(
      sender?: null,
      owner?: null,
      orderHash?: null
    ): OrderZeroAmountEventFilter;
    OrderZeroAmount(
      sender?: null,
      owner?: null,
      orderHash?: null
    ): OrderZeroAmountEventFilter;

    "RemoveOrder(address,tuple,uint256)"(
      sender?: null,
      order?: null,
      orderHash?: null
    ): RemoveOrderEventFilter;
    RemoveOrder(
      sender?: null,
      order?: null,
      orderHash?: null
    ): RemoveOrderEventFilter;

    "TakeOrder(address,tuple,uint256,uint256)"(
      sender?: null,
      config?: null,
      input?: null,
      output?: null
    ): TakeOrderEventFilter;
    TakeOrder(
      sender?: null,
      config?: null,
      input?: null,
      output?: null
    ): TakeOrderEventFilter;

    "Withdraw(address,tuple,uint256)"(
      sender?: null,
      config?: null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(sender?: null, config?: null, amount?: null): WithdrawEventFilter;
  };

  estimateGas: {
    addOrder(
      config_: OrderConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    clear(
      alice_: OrderStruct,
      bob_: OrderStruct,
      clearConfig_: ClearConfigStruct,
      aliceSignedContext_: SignedContextV1Struct[],
      bobSignedContext_: SignedContextV1Struct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposit(
      config_: DepositConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    flashFee(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    flashLoan(
      receiver_: PromiseOrValue<string>,
      token_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    maxFlashLoan(
      token_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeOrder(
      order_: OrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    takeOrders(
      takeOrders_: TakeOrdersConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vaultBalance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      config_: WithdrawConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addOrder(
      config_: OrderConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    clear(
      alice_: OrderStruct,
      bob_: OrderStruct,
      clearConfig_: ClearConfigStruct,
      aliceSignedContext_: SignedContextV1Struct[],
      bobSignedContext_: SignedContextV1Struct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      config_: DepositConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    flashFee(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    flashLoan(
      receiver_: PromiseOrValue<string>,
      token_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    maxFlashLoan(
      token_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeOrder(
      order_: OrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    takeOrders(
      takeOrders_: TakeOrdersConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vaultBalance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      config_: WithdrawConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
